import { useState, useEffect, useCallback, useRef } from 'react';
import toast from 'react-hot-toast';
import { useCart } from '@/contexts/CartContext';

interface PriceData {
  minPrice: number | null;
  cheapestOffer: any | null;
  isLoading: boolean;
  hasOffers: boolean;
}

interface UseCatalogPricesReturn {
  getPriceData: (articleNumber: string, brand: string) => PriceData;
  addToCart: (articleNumber: string, brand: string) => Promise<void>;
}

export const useCatalogPrices = (): UseCatalogPricesReturn => {
  const [priceCache, setPriceCache] = useState<Map<string, PriceData>>(new Map());
  const loadingRequestsRef = useRef<Set<string>>(new Set());
  const { addItem } = useCart();

  const getOffersData = useCallback(async (articleNumber: string, brand: string) => {
    const graphqlUri = process.env.NEXT_PUBLIC_CMS_GRAPHQL_URL || 'http://localhost:3000/api/graphql';
    
    console.log('üîç useCatalogPrices: –∑–∞–ø—Ä–æ—Å —Ü–µ–Ω –¥–ª—è:', { articleNumber, brand, graphqlUri });
    
    try {
      const response = await fetch(graphqlUri, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          query: `
            query SearchProductOffers($articleNumber: String!, $brand: String!) {
              searchProductOffers(articleNumber: $articleNumber, brand: $brand) {
                internalOffers {
                  id
                  productId
                  price
                  quantity
                  warehouse
                  deliveryDays
                  available
                  rating
                  supplier
                }
                externalOffers {
                  offerKey
                  brand
                  code
                  name
                  price
                  currency
                  deliveryTime
                  deliveryTimeMax
                  quantity
                  warehouse
                  supplier
                  comment
                  weight
                  volume
                  canPurchase
                }
              }
            }
          `,
          variables: {
            articleNumber,
            brand
          }
        })
      });

      console.log('üì° useCatalogPrices: HTTP —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);

      if (!response.ok) {
        console.error('‚ùå useCatalogPrices: HTTP –æ—à–∏–±–∫–∞:', response.status, response.statusText);
        return { minPrice: null, cheapestOffer: null, hasOffers: false };
      }

      const data = await response.json();
      console.log('üì¶ useCatalogPrices: –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', data);
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ GraphQL, –ª–æ–≥–∏—Ä—É–µ–º –∏—Ö
      if (data.errors) {
        console.error('‚ùå useCatalogPrices: GraphQL –æ—à–∏–±–∫–∏:', data.errors);
        return { minPrice: null, cheapestOffer: null, hasOffers: false };
      }
      
      const offers = data?.data?.searchProductOffers;
      console.log('üîç useCatalogPrices: –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', offers);
      
      if (!offers) {
        console.log('‚ö†Ô∏è useCatalogPrices: –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return { minPrice: null, cheapestOffer: null, hasOffers: false };
      }

      const allOffers: any[] = [];
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
      if (offers.internalOffers) {
        console.log('üì¶ useCatalogPrices: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', offers.internalOffers.length);
        offers.internalOffers.forEach((offer: any) => {
          if (offer.price && offer.price > 0) {
            allOffers.push({ 
              ...offer, 
              type: 'internal',
              id: offer.id,
              supplierName: offer.supplier,
              deliveryDays: offer.deliveryDays
            });
          }
        });
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
      if (offers.externalOffers) {
        console.log('üåê useCatalogPrices: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', offers.externalOffers.length);
        offers.externalOffers.forEach((offer: any) => {
          if (offer.price && offer.price > 0) {
            allOffers.push({ 
              ...offer, 
              type: 'external',
              id: offer.offerKey,
              supplierName: offer.supplier,
              deliveryDays: offer.deliveryTime || offer.deliveryTimeMax || 0
            });
          }
        });
      }

      console.log('üéØ useCatalogPrices: –∏—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:', allOffers.length);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –∫–∞–∫–∏–µ-—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–¥–∞–∂–µ –±–µ–∑ —Ü–µ–Ω—ã)
      const hasAnyOffers = (offers.internalOffers && offers.internalOffers.length > 0) || 
                          (offers.externalOffers && offers.externalOffers.length > 0);

      if (allOffers.length === 0) {
        console.log('‚ö†Ô∏è useCatalogPrices: –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å —Ü–µ–Ω–æ–π > 0');
        return { minPrice: null, cheapestOffer: null, hasOffers: hasAnyOffers };
      }

      // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º–æ–µ –¥–µ—à–µ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
      const cheapestOffer = allOffers.reduce((cheapest, current) => {
        return current.price < cheapest.price ? current : cheapest;
      });

      console.log('üí∞ useCatalogPrices: —Å–∞–º–æ–µ –¥–µ—à–µ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:', {
        price: cheapestOffer.price,
        supplier: cheapestOffer.supplierName,
        type: cheapestOffer.type
      });

      return {
        minPrice: cheapestOffer.price,
        cheapestOffer,
        hasOffers: true
      };
    } catch (error) {
      console.error('‚ùå useCatalogPrices: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:', error);
      return { minPrice: null, cheapestOffer: null, hasOffers: false };
    }
  }, []);

  const getPriceData = useCallback((articleNumber: string, brand: string): PriceData => {
    if (!articleNumber || !brand) {
      return { minPrice: null, cheapestOffer: null, isLoading: false, hasOffers: false };
    }

    const key = `${brand}-${articleNumber}`;
    const cached = priceCache.get(key);
    
    if (cached) {
      return cached;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä
    if (loadingRequestsRef.current.has(key)) {
      return { minPrice: null, cheapestOffer: null, isLoading: true, hasOffers: false };
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    const loadingState: PriceData = { minPrice: null, cheapestOffer: null, isLoading: true, hasOffers: false };
    setPriceCache(prev => new Map(prev).set(key, loadingState));
    loadingRequestsRef.current.add(key);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    getOffersData(articleNumber, brand).then(({ minPrice, cheapestOffer, hasOffers }) => {
      const finalState: PriceData = { minPrice, cheapestOffer, isLoading: false, hasOffers };
      setPriceCache(prev => new Map(prev).set(key, finalState));
      loadingRequestsRef.current.delete(key);
    }).catch((error) => {
      console.error('‚ùå useCatalogPrices: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω—ã:', error);
      const errorState: PriceData = { minPrice: null, cheapestOffer: null, isLoading: false, hasOffers: false };
      setPriceCache(prev => new Map(prev).set(key, errorState));
      loadingRequestsRef.current.delete(key);
    });

    return loadingState;
  }, [priceCache, getOffersData]);

  const addToCart = useCallback(async (articleNumber: string, brand: string) => {
    const key = `${brand}-${articleNumber}`;
    const cached = priceCache.get(key);
    
    let cheapestOffer = cached?.cheapestOffer;
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∑–∞–≥—Ä—É–∂–∞–µ–º
    if (!cheapestOffer) {
      const { cheapestOffer: offer } = await getOffersData(articleNumber, brand);
      cheapestOffer = offer;
    }

    if (!cheapestOffer) {
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞');
      return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É —Å–∞–º–æ–µ –¥–µ—à–µ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    try {
      const itemToAdd = {
        productId: cheapestOffer.type === 'internal' ? cheapestOffer.id : undefined,
        offerKey: cheapestOffer.type === 'external' ? cheapestOffer.id : undefined,
        name: `${brand} ${articleNumber}`,
        description: `${brand} ${articleNumber}`,
        brand: brand,
        article: articleNumber,
        price: cheapestOffer.price,
        currency: cheapestOffer.currency || 'RUB',
        quantity: 1,
        deliveryTime: cheapestOffer.deliveryDays?.toString() || '0',
        warehouse: cheapestOffer.warehouse || '–°–∫–ª–∞–¥',
        supplier: cheapestOffer.supplierName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫',
        isExternal: cheapestOffer.type === 'external',
        image: '/images/image-10.png', // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–∑–∂–µ
      };

      addItem(itemToAdd);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      toast.success(`–¢–æ–≤–∞—Ä "${brand} ${articleNumber}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É –∑–∞ ${cheapestOffer.price} ‚ÇΩ`);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:', error);
      toast.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É');
    }
  }, [priceCache, getOffersData, addItem]);

  return {
    getPriceData,
    addToCart
  };
}; 