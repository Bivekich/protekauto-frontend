'use client'

import React, { createContext, useContext, useReducer, useEffect, useState } from 'react'
import { CartState, CartContextType, CartItem, DeliveryInfo } from '@/types/cart'

// –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
const initialState: CartState = {
  items: [],
  summary: {
    totalItems: 0,
    totalPrice: 0,
    totalDiscount: 0,
    deliveryPrice: 39,
    finalPrice: 0
  },
  delivery: {
    type: '–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º',
    address: '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –ö–∞–ª–∏–Ω–∏–≥—Ä–∞–¥, —É–ª–∏—Ü–∞ –ü–æ–Ω–∞—Ä—Ç—Å–∫–∞—è, 5, –∫–≤./–æ—Ñ–∏—Å 1, –ü–æ–¥—ä–µ–∑–¥ 1, —ç—Ç–∞–∂ 1',
    price: 39
  },
  orderComment: '',
  isLoading: false
}

// –¢–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π
type CartAction =
  | { type: 'ADD_ITEM'; payload: Omit<CartItem, 'id' | 'selected' | 'favorite'> }
  | { type: 'REMOVE_ITEM'; payload: string }
  | { type: 'UPDATE_QUANTITY'; payload: { id: string; quantity: number } }
  | { type: 'TOGGLE_SELECT'; payload: string }
  | { type: 'TOGGLE_FAVORITE'; payload: string }
  | { type: 'UPDATE_COMMENT'; payload: { id: string; comment: string } }
  | { type: 'UPDATE_ORDER_COMMENT'; payload: string }
  | { type: 'SELECT_ALL' }
  | { type: 'REMOVE_ALL' }
  | { type: 'REMOVE_SELECTED' }
  | { type: 'UPDATE_DELIVERY'; payload: Partial<DeliveryInfo> }
  | { type: 'CLEAR_CART' }
  | { type: 'LOAD_CART'; payload: CartItem[] }
  | { type: 'LOAD_FULL_STATE'; payload: { items: CartItem[]; delivery: DeliveryInfo; orderComment: string } }
  | { type: 'SET_LOADING'; payload: boolean }
  | { type: 'SET_ERROR'; payload: string }

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID
const generateId = () => Math.random().toString(36).substr(2, 9)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏—Ç–æ–≥–æ–≤
const calculateSummary = (items: CartItem[], deliveryPrice: number) => {
  const selectedItems = items.filter(item => item.selected)
  const totalItems = selectedItems.reduce((sum, item) => sum + item.quantity, 0)
  const totalPrice = selectedItems.reduce((sum, item) => sum + (item.price * item.quantity), 0)
  const totalDiscount = selectedItems.reduce((sum, item) => {
    const discount = item.originalPrice ? (item.originalPrice - item.price) * item.quantity : 0
    return sum + discount
  }, 0)
  const finalPrice = totalPrice + deliveryPrice

  return {
    totalItems,
    totalPrice,
    totalDiscount,
    deliveryPrice,
    finalPrice
  }
}

// –†–µ–¥—å—é—Å–µ—Ä –∫–æ—Ä–∑–∏–Ω—ã
const cartReducer = (state: CartState, action: CartAction): CartState => {
  switch (action.type) {
    case 'ADD_ITEM': {
      const existingItemIndex = state.items.findIndex(
        item => 
          (item.productId && item.productId === action.payload.productId) ||
          (item.offerKey && item.offerKey === action.payload.offerKey)
      )

      let newItems: CartItem[]
      
      if (existingItemIndex >= 0) {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
        newItems = state.items.map((item, index) =>
          index === existingItemIndex
            ? { ...item, quantity: item.quantity + action.payload.quantity }
            : item
        )
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
        const newItem: CartItem = {
          ...action.payload,
          id: generateId(),
          selected: true,
          favorite: false
        }
        newItems = [...state.items, newItem]
      }

      const newSummary = calculateSummary(newItems, state.delivery.price)
      
      return {
        ...state,
        items: newItems,
        summary: newSummary
      }
    }

    case 'REMOVE_ITEM': {
      const newItems = state.items.filter(item => item.id !== action.payload)
      const newSummary = calculateSummary(newItems, state.delivery.price)
      
      return {
        ...state,
        items: newItems,
        summary: newSummary
      }
    }

    case 'UPDATE_QUANTITY': {
      const newItems = state.items.map(item =>
        item.id === action.payload.id
          ? { ...item, quantity: Math.max(1, action.payload.quantity) }
          : item
      )
      const newSummary = calculateSummary(newItems, state.delivery.price)
      
      return {
        ...state,
        items: newItems,
        summary: newSummary
      }
    }

    case 'TOGGLE_SELECT': {
      const newItems = state.items.map(item =>
        item.id === action.payload
          ? { ...item, selected: !item.selected }
          : item
      )
      const newSummary = calculateSummary(newItems, state.delivery.price)
      
      return {
        ...state,
        items: newItems,
        summary: newSummary
      }
    }

    case 'TOGGLE_FAVORITE': {
      const newItems = state.items.map(item =>
        item.id === action.payload
          ? { ...item, favorite: !item.favorite }
          : item
      )
      
      return {
        ...state,
        items: newItems
      }
    }

    case 'UPDATE_COMMENT': {
      const newItems = state.items.map(item =>
        item.id === action.payload.id
          ? { ...item, comment: action.payload.comment }
          : item
      )
      
      return {
        ...state,
        items: newItems
      }
    }

    case 'UPDATE_ORDER_COMMENT': {
      return {
        ...state,
        orderComment: action.payload
      }
    }

    case 'SELECT_ALL': {
      const allSelected = state.items.every(item => item.selected)
      const newItems = state.items.map(item => ({
        ...item,
        selected: !allSelected
      }))
      const newSummary = calculateSummary(newItems, state.delivery.price)
      
      return {
        ...state,
        items: newItems,
        summary: newSummary
      }
    }

    case 'REMOVE_ALL': {
      const newSummary = calculateSummary([], state.delivery.price)
      
      return {
        ...state,
        items: [],
        summary: newSummary
      }
    }

    case 'REMOVE_SELECTED': {
      const newItems = state.items.filter(item => !item.selected)
      const newSummary = calculateSummary(newItems, state.delivery.price)
      
      return {
        ...state,
        items: newItems,
        summary: newSummary
      }
    }

    case 'UPDATE_DELIVERY': {
      const newDelivery = { ...state.delivery, ...action.payload }
      const newSummary = calculateSummary(state.items, newDelivery.price)
      
      return {
        ...state,
        delivery: newDelivery,
        summary: newSummary
      }
    }

    case 'CLEAR_CART': {
      const newSummary = calculateSummary([], state.delivery.price)
      
      return {
        ...state,
        items: [],
        summary: newSummary
      }
    }

    case 'LOAD_CART': {
      const newSummary = calculateSummary(action.payload, state.delivery.price)
      
      return {
        ...state,
        items: action.payload,
        summary: newSummary
      }
    }

    case 'LOAD_FULL_STATE': {
      const newSummary = calculateSummary(action.payload.items, action.payload.delivery.price || state.delivery.price)
      
      return {
        ...state,
        items: action.payload.items,
        delivery: action.payload.delivery,
        orderComment: action.payload.orderComment,
        summary: newSummary
      }
    }

    case 'SET_LOADING': {
      return {
        ...state,
        isLoading: action.payload
      }
    }

    case 'SET_ERROR': {
      return {
        ...state,
        error: action.payload,
        isLoading: false
      }
    }

    default:
      return state
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
const CartContext = createContext<CartContextType | undefined>(undefined)

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–æ—Ä–∑–∏–Ω—ã
export const CartProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [state, dispatch] = useReducer(cartReducer, initialState)
  const [isInitialized, setIsInitialized] = useState(false)

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –∏–∑ localStorage –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (typeof window === 'undefined') return

    console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –∏–∑ localStorage...')
    
    const savedCartState = localStorage.getItem('cartState')
    if (savedCartState) {
      try {
        const cartState = JSON.parse(savedCartState)
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã:', cartState)
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
        dispatch({ type: 'LOAD_FULL_STATE', payload: cartState })
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã –∏–∑ localStorage:', error)
        // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (—Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã)
        const savedCart = localStorage.getItem('cart')
        if (savedCart) {
          try {
            const cartItems = JSON.parse(savedCart)
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:', cartItems)
            dispatch({ type: 'LOAD_CART', payload: cartItems })
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä–æ–π –∫–æ—Ä–∑–∏–Ω—ã:', error)
          }
        }
      }
    } else {
      console.log('‚ÑπÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
    }
    
    setIsInitialized(true)
  }, [])

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
  useEffect(() => {
    if (!isInitialized || typeof window === 'undefined') return

    const stateToSave = {
      items: state.items,
      delivery: state.delivery,
      orderComment: state.orderComment
    }
    
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã:', stateToSave)
    localStorage.setItem('cartState', JSON.stringify(stateToSave))
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–∫–∂–µ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    localStorage.setItem('cart', JSON.stringify(state.items))
  }, [state.items, state.delivery, state.orderComment, isInitialized])

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ä–∑–∏–Ω–æ–π
  const addItem = (item: Omit<CartItem, 'id' | 'selected' | 'favorite'>) => {
    dispatch({ type: 'ADD_ITEM', payload: item })
  }

  const removeItem = (id: string) => {
    dispatch({ type: 'REMOVE_ITEM', payload: id })
  }

  const updateQuantity = (id: string, quantity: number) => {
    dispatch({ type: 'UPDATE_QUANTITY', payload: { id, quantity } })
  }

  const toggleSelect = (id: string) => {
    dispatch({ type: 'TOGGLE_SELECT', payload: id })
  }

  const toggleFavorite = (id: string) => {
    dispatch({ type: 'TOGGLE_FAVORITE', payload: id })
  }

  const updateComment = (id: string, comment: string) => {
    dispatch({ type: 'UPDATE_COMMENT', payload: { id, comment } })
  }

  const updateOrderComment = (comment: string) => {
    dispatch({ type: 'UPDATE_ORDER_COMMENT', payload: comment })
  }

  const selectAll = () => {
    dispatch({ type: 'SELECT_ALL' })
  }

  const removeAll = () => {
    dispatch({ type: 'REMOVE_ALL' })
  }

  const removeSelected = () => {
    dispatch({ type: 'REMOVE_SELECTED' })
  }

  const updateDelivery = (delivery: Partial<DeliveryInfo>) => {
    dispatch({ type: 'UPDATE_DELIVERY', payload: delivery })
  }

  const clearCart = () => {
    dispatch({ type: 'CLEAR_CART' })
    // –û—á–∏—â–∞–µ–º localStorage –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã
    if (typeof window !== 'undefined') {
      localStorage.removeItem('cartState')
      localStorage.removeItem('cart')
    }
  }

  const contextValue: CartContextType = {
    state,
    addItem,
    removeItem,
    updateQuantity,
    toggleSelect,
    toggleFavorite,
    updateComment,
    updateOrderComment,
    selectAll,
    removeAll,
    removeSelected,
    updateDelivery,
    clearCart
  }

  return (
    <CartContext.Provider value={contextValue}>
      {children}
    </CartContext.Provider>
  )
}


// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã
export const useCart = (): CartContextType => {
  const context = useContext(CartContext)
  if (!context) {
    throw new Error('useCart –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ CartProvider')
  }
  return context
} 