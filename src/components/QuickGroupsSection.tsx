import React, { useState } from 'react';
import { useQuery } from '@apollo/client';
import { GET_LAXIMO_QUICK_GROUPS, GET_LAXIMO_QUICK_DETAIL } from '@/lib/graphql';
import { LaximoQuickGroup, LaximoQuickDetail } from '@/types/laximo';

interface QuickGroupsSectionProps {
  catalogCode: string;
  vehicleId: string;
  ssd?: string;
}

const QuickGroupsSection: React.FC<QuickGroupsSectionProps> = ({
  catalogCode,
  vehicleId,
  ssd
}) => {
  const [selectedGroup, setSelectedGroup] = useState<LaximoQuickGroup | null>(null);
  const [groupHierarchy, setGroupHierarchy] = useState<LaximoQuickGroup[]>([]);

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
  const { data: quickGroupsData, loading: quickGroupsLoading, error: quickGroupsError } = useQuery<{ laximoQuickGroups: LaximoQuickGroup[] }>(
    GET_LAXIMO_QUICK_GROUPS,
    {
      variables: { 
        catalogCode,
        vehicleId,
        ...(ssd && ssd.trim() !== '' && { ssd })
      },
      skip: !catalogCode || !vehicleId,
      errorPolicy: 'all',
      onCompleted: (data) => {
        console.log('üîç –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ QuickGroups:', data);
        if (data.laximoQuickGroups) {
          console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥—Ä—É–ø–ø:');
          data.laximoQuickGroups.forEach((group, index) => {
            console.log(`  [${index}] ${group.name} (ID: ${group.quickgroupid}, Link: ${group.link})`);
            if (group.children && group.children.length > 0) {
              console.log(`    ‚îî‚îÄ –î–æ—á–µ—Ä–Ω–∏—Ö –≥—Ä—É–ø–ø: ${group.children.length}`);
              group.children.forEach((child, childIndex) => {
                console.log(`       [${childIndex}] ${child.name} (ID: ${child.quickgroupid}, Link: ${child.link})`);
              });
            }
          });
        }
      }
    }
  );

  // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
  const { data: quickDetailData, loading: quickDetailLoading, error: quickDetailError } = useQuery<{ laximoQuickDetail: LaximoQuickDetail }>(
    GET_LAXIMO_QUICK_DETAIL,
    {
      variables: {
        catalogCode,
        vehicleId,
        quickGroupId: selectedGroup?.quickgroupid || '',
        ssd: ssd || ''
      },
      skip: !selectedGroup || !ssd,
      errorPolicy: 'all'
    }
  );

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –≥—Ä—É–ø–ø –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const getCurrentGroups = (): LaximoQuickGroup[] => {
    const allGroups = quickGroupsData?.laximoQuickGroups || [];
    
    console.log('üîç getCurrentGroups –≤—ã–∑–≤–∞–Ω–∞. –í—Å–µ–≥–æ –≥—Ä—É–ø–ø:', allGroups.length);
    console.log('üìä –ò–µ—Ä–∞—Ä—Ö–∏—è –≥—Ä—É–ø–ø:', groupHierarchy.length, '—É—Ä–æ–≤–Ω–µ–π');
    
    if (groupHierarchy.length === 0) {
      // –ò—â–µ–º –≥–ª–∞–≤–Ω—É—é –≥—Ä—É–ø–ø—É "–õ–µ–≥–∫–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ (NEW)" —Å ID=0
      console.log('üîç –ü–æ–∏—Å–∫ –≥–ª–∞–≤–Ω–æ–π –≥—Ä—É–ø–ø—ã "–õ–µ–≥–∫–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ (NEW)" —Å ID=0...');
      
      const mainGroup = allGroups.find(group => 
        group.quickgroupid === '0' && 
        group.name.includes('–õ–µ–≥–∫–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏')
      );
      
      if (mainGroup && mainGroup.children && mainGroup.children.length > 0) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≥–ª–∞–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞ "${mainGroup.name}" —Å ${mainGroup.children.length} –¥–æ—á–µ—Ä–Ω–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏:`);
        mainGroup.children.forEach((child, index) => {
          console.log(`  [${index}] ${child.name} (ID: ${child.quickgroupid}, Link: ${child.link}, Children: ${child.children?.length || 0})`);
        });
        return mainGroup.children;
      } else {
        console.log('‚ùå –ì–ª–∞–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞ "–õ–µ–≥–∫–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ (NEW)" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –Ω–µ—ë –Ω–µ—Ç –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
        console.log('üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º...');
        
                 // –ú–∞–ø–ø–∏–Ω–≥ —Ç—Ä–µ–±—É–µ–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫ —Ç–æ—á–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏—è–º –∏–∑ –ª–æ–≥–æ–≤ backend
         const systemMapping: Record<string, string | string[]> = {
           // –¢—Ä–µ–±—É–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ -> —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ backend
           '–î–µ—Ç–∞–ª–∏ –¥–ª—è –¢–û': '–î–µ—Ç–∞–ª–∏ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ / –ø—Ä–æ–≤–µ—Ä–∫–∏ / —É—Ö–æ–¥–∞',  // ID: 10119
           '–î–≤–∏–≥–∞—Ç–µ–ª—å': '–î–≤–∏–≥–∞—Ç–µ–ª—å',                                   // ID: 10102  
           '–¢–æ–ø–ª–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞': '–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–∞—á–∏ —Ç–æ–ø–ª–∏–≤–∞',              // ID: 10314
           '–°–∏—Å—Ç–µ–º–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è': '–°–∏—Å—Ç–µ–º–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è',                 // ID: 10107
           '–°–∏—Å—Ç–µ–º–∞ –≤—ã–ø—É—Å–∫–∞': '–°–∏—Å—Ç–µ–º–∞ –≤—ã–ø—É—Å–∫–∞',                       // ID: 10104
           '–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è': ['–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á', '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á', '–°–∏—Å—Ç–µ–º–∞ —Å—Ü–µ–ø–ª–µ–Ω–∏—è / –Ω–∞–≤–µ—Å–Ω—ã–µ —á–∞—Å—Ç–∏'], // ID: 10338, 10340, 10150
           '–•–æ–¥–æ–≤–∞—è —á–∞—Å—Ç—å': ['–ü–æ–¥–≤–µ—Å–∫–∞ / –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è', '–ü–æ–¥–≤–µ—Å–∫–∞ –æ—Å–∏ / —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–≤–µ—Å–∫–∏ / –∫–æ–ª–µ—Å–∞'], // ID: 10111, 10113
           '–†—É–ª–µ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ': '–†—É–ª–µ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',                 // ID: 10112
           '–¢–æ—Ä–º–æ–∑–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞': '–¢–æ—Ä–º–æ–∑–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',                   // ID: 10106
           '–≠–ª–µ–∫—Ç—Ä–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ': ['–≠–ª–µ–∫—Ç—Ä–∏–∫–∞', '–°–∏—Å—Ç–µ–º–∞ –∑–∞–∂–∏–≥–∞–Ω–∏—è / –Ω–∞–∫–∞–ª–∏–≤–∞–Ω–∏—è'], // ID: 10110, 10108
           '–û—Ç–æ–ø–ª–µ–Ω–∏–µ / –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ': ['–û—Ç–æ–ø–ª–µ–Ω–∏–µ / –≤–µ–Ω—Ç–∏–ª—è—Ü–∏—è', '–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä'], // ID: 10341, 10343
           '–î–µ—Ç–∞–ª–∏ —Å–∞–ª–æ–Ω–∞': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞',                      // ID: 10441
           '–î–µ—Ç–∞–ª–∏ –∫—É–∑–æ–≤–∞': ['–î–µ—Ç–∞–ª–∏ –∫—É–∑–æ–≤–∞/–∫—Ä—ã–ª–æ/–±–∞–º–ø–µ—Ä', '–õ–µ–≥–∫–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏'],   // –ò–∑ –ª–æ–≥–æ–≤
           '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ': ['–°–∏—Å—Ç–µ–º–∞ –æ—á–∏—Å—Ç–∫–∏ –æ–∫–æ–Ω', '–ü—Ä–∏—Ü–µ–ø–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ / –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ', '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–¥–æ–±—Å—Ç–≤–∞'] // ID: 10118, 10115, 10435
         };
        
        // –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–æ—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø –∏–∑ backend –ª–æ–≥–æ–≤
        const allExpectedGroups = [
          '–î–µ—Ç–∞–ª–∏ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ / –ø—Ä–æ–≤–µ—Ä–∫–∏ / —É—Ö–æ–¥–∞',
          '–î–≤–∏–≥–∞—Ç–µ–ª—å',
          '–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–∞—á–∏ —Ç–æ–ø–ª–∏–≤–∞',
          '–°–∏—Å—Ç–µ–º–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è', 
          '–°–∏—Å—Ç–µ–º–∞ –≤—ã–ø—É—Å–∫–∞',
          '–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á',
          '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á',
          '–°–∏—Å—Ç–µ–º–∞ —Å—Ü–µ–ø–ª–µ–Ω–∏—è / –Ω–∞–≤–µ—Å–Ω—ã–µ —á–∞—Å—Ç–∏',
          '–ü–æ–¥–≤–µ—Å–∫–∞ / –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è',
          '–ü–æ–¥–≤–µ—Å–∫–∞ –æ—Å–∏ / —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–≤–µ—Å–∫–∏ / –∫–æ–ª–µ—Å–∞',
          '–†—É–ª–µ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
          '–¢–æ—Ä–º–æ–∑–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',
          '–≠–ª–µ–∫—Ç—Ä–∏–∫–∞',
          '–°–∏—Å—Ç–µ–º–∞ –∑–∞–∂–∏–≥–∞–Ω–∏—è / –Ω–∞–∫–∞–ª–∏–≤–∞–Ω–∏—è',
          '–û—Ç–æ–ø–ª–µ–Ω–∏–µ / –≤–µ–Ω—Ç–∏–ª—è—Ü–∏—è',
          '–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä',
          '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞',
          '–î–µ—Ç–∞–ª–∏ –∫—É–∑–æ–≤–∞/–∫—Ä—ã–ª–æ/–±–∞–º–ø–µ—Ä',
          '–ö—É–∑–æ–≤',
          '–°–∏—Å—Ç–µ–º–∞ –æ—á–∏—Å—Ç–∫–∏ –æ–∫–æ–Ω',
          '–ü—Ä–∏—Ü–µ–ø–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ / –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ',
          '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–¥–æ–±—Å—Ç–≤–∞',
          '–§–∏–ª—å—Ç—Ä',
          '–†–µ–º–µ–Ω–Ω—ã–π –ø—Ä–∏–≤–æ–¥',
          '–ü—Ä–∏–≤–æ–¥ –∫–æ–ª–µ—Å–∞',
          '–ì–ª–∞–≤–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞',
          '–°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'
        ];
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        const createVirtualCategories = (): LaximoQuickGroup[] => {
          const virtualCategories: LaximoQuickGroup[] = [];
          
          // –¢—Ä–µ–±—É–µ–º—ã–π –ø–æ—Ä—è–¥–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
          const requiredCategories = [
            '–î–µ—Ç–∞–ª–∏ –¥–ª—è –¢–û',
            '–î–≤–∏–≥–∞—Ç–µ–ª—å', 
            '–¢–æ–ø–ª–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',
            '–°–∏—Å—Ç–µ–º–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è',
            '–°–∏—Å—Ç–µ–º–∞ –≤—ã–ø—É—Å–∫–∞',
            '–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è',
            '–•–æ–¥–æ–≤–∞—è —á–∞—Å—Ç—å',
            '–†—É–ª–µ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
            '–¢–æ—Ä–º–æ–∑–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',
            '–≠–ª–µ–∫—Ç—Ä–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
            '–û—Ç–æ–ø–ª–µ–Ω–∏–µ / –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
            '–î–µ—Ç–∞–ª–∏ —Å–∞–ª–æ–Ω–∞',
            '–î–µ—Ç–∞–ª–∏ –∫—É–∑–æ–≤–∞',
            '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ'
          ];
          
          requiredCategories.forEach((categoryName, index) => {
            const mappedNames = systemMapping[categoryName];
            const matchingGroups: LaximoQuickGroup[] = [];
            
            // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã –≤ backend –¥–∞–Ω–Ω—ã—Ö
            if (Array.isArray(mappedNames)) {
              mappedNames.forEach(mappedName => {
                const found = allGroups.find(group => group.name === mappedName);
                if (found) {
                  matchingGroups.push(found);
                  console.log(`üéØ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –¥–ª—è "${categoryName}": "${found.name}" (ID: ${found.quickgroupid})`);
                }
              });
            } else {
              const found = allGroups.find(group => group.name === mappedNames);
              if (found) {
                matchingGroups.push(found);
                console.log(`üéØ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –¥–ª—è "${categoryName}": "${found.name}" (ID: ${found.quickgroupid})`);
              }
            }
            
            if (matchingGroups.length > 0) {
              // –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
              const virtualCategory: LaximoQuickGroup = {
                quickgroupid: `virtual_${index}`,
                name: categoryName,
                link: false,
                children: matchingGroups.length === 1 ? matchingGroups[0].children : matchingGroups.flatMap(g => g.children || [])
              };
              
              virtualCategories.push(virtualCategory);
              console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: "${categoryName}" —Å ${virtualCategory.children?.length || 0} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏`);
            } else {
              console.log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≥—Ä—É–ø–ø—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: "${categoryName}"`);
            }
          });
          
          return virtualCategories;
        };
        
        const foundSystems = createVirtualCategories();
        
        if (foundSystems.length > 0) {
          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${foundSystems.length} –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:`);
          
          foundSystems.forEach((system, index) => {
            console.log(`  [${index}] ${system.name} (ID: ${system.quickgroupid}, Link: ${system.link}, Children: ${system.children?.length || 0})`);
          });
          
          return foundSystems;
        } else {
          console.log('‚ùå –û—Å–Ω–æ–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
          
          // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—ã —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
          const groupsWithChildren = allGroups.filter(group => 
            group.children && group.children.length > 0
          ).sort((a, b) => (b.children?.length || 0) - (a.children?.length || 0));
          
          const topGroups = groupsWithChildren.slice(0, 15);
          console.log(`üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-${topGroups.length} –≥—Ä—É–ø–ø —Å –¥–æ—á–µ—Ä–Ω–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏:`);
          topGroups.forEach((group, index) => {
            console.log(`  [${index}] ${group.name} (ID: ${group.quickgroupid}, Children: ${group.children?.length || 0})`);
          });
          
          return topGroups;
        }
      }
    } else {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
      const lastGroup = groupHierarchy[groupHierarchy.length - 1];
      console.log('üìÇ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–ª—è:', lastGroup.name);
      console.log('üìä –î–æ—á–µ—Ä–Ω–∏—Ö –≥—Ä—É–ø–ø:', lastGroup.children?.length || 0);
      
      if (lastGroup.children) {
        lastGroup.children.forEach((child, index) => {
          console.log(`  [${index}] ${child.name} (ID: ${child.quickgroupid}, Link: ${child.link})`);
        });
      }
      
      return lastGroup.children || [];
    }
  };

  const handleGroupClick = (group: LaximoQuickGroup) => {
    console.log('üîç –ö–ª–∏–∫ –ø–æ –≥—Ä—É–ø–ø–µ:', group.name, 'Link:', group.link, 'Children:', group.children?.length);
    
    // –ï—Å–ª–∏ —ç—Ç–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    if (group.quickgroupid.startsWith('virtual_')) {
      console.log('üîç –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', group.name);
      setGroupHierarchy(prev => [...prev, group]);
      return;
    }
    
    if (group.link) {
      // –≠—Ç–æ –∫–æ–Ω–µ—á–Ω–∞—è –≥—Ä—É–ø–ø–∞ —Å –ø–æ–∏—Å–∫–æ–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
      console.log('üîç –í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:', group.name, 'ID:', group.quickgroupid);
      setSelectedGroup(group);
    } else if (group.children && group.children.length > 0) {
      // –≠—Ç–æ –≥—Ä—É–ø–ø–∞ —Å –ø–æ–¥–≥—Ä—É–ø–ø–∞–º–∏ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏–µ—Ä–∞—Ä—Ö–∏—é
      console.log('üîç –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–æ–¥–≥—Ä—É–ø–ø—ã:', group.name);
      setGroupHierarchy(prev => [...prev, group]);
    }
  };

  const handleBackToLevel = (index: number) => {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É—Ä–æ–≤–Ω—é —Å –∏–Ω–¥–µ–∫—Å–æ–º index
    setGroupHierarchy(prev => prev.slice(0, index + 1));
  };

  const handleBackToGroups = () => {
    setSelectedGroup(null);
  };

  // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
  if (selectedGroup) {
    return (
      <div className="flex h-full">
        {/* –õ–µ–≤–∞—è –±–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –≥—Ä—É–ø–ø–∞–º–∏ */}
        <div className="w-80 bg-white border-r border-gray-200 flex flex-col">
          <div className="p-4 border-b border-gray-200">
            <button
              onClick={handleBackToGroups}
              className="flex items-center text-gray-600 hover:text-gray-900 transition-colors"
            >
              <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
              –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º
            </button>
          </div>
          
          <div className="p-4">
            <h3 className="font-semibold text-gray-900 mb-2">
              {selectedGroup.name}
            </h3>
            <p className="text-sm text-gray-600">
              –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ
            </p>
          </div>
        </div>

        {/* –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ */}
        <div className="flex-1 p-6">
          {quickDetailLoading && (
            <div className="text-center py-8">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-red-600 mx-auto"></div>
              <p className="mt-4 text-gray-600">–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≥—Ä—É–ø–ø—ã...</p>
            </div>
          )}

          {quickDetailError && (
            <div className="text-center py-8">
              <div className="text-red-600 mb-4">
                <svg className="w-12 h-12 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
                </svg>
              </div>
              <h3 className="text-lg font-medium text-gray-900 mb-2">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π</h3>
              <p className="text-gray-600 mb-4">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –≥—Ä—É–ø–ø—ã</p>
              <p className="text-sm text-gray-500">
                {quickDetailError.message}
              </p>
            </div>
          )}

          {quickDetailData?.laximoQuickDetail && (
            <div>
              <h2 className="text-xl font-semibold text-gray-900 mb-4">
                –î–µ—Ç–∞–ª–∏ –≤ –≥—Ä—É–ø–ø–µ "{selectedGroup.name}"
              </h2>
              <p className="text-sm text-gray-600 mb-6">
                –ù–∞–π–¥–µ–Ω–æ —É–∑–ª–æ–≤: {quickDetailData.laximoQuickDetail.units?.length || 0}
              </p>

              <div className="space-y-6">
                {quickDetailData.laximoQuickDetail.units?.map((unit, unitIndex) => (
                  <div key={`${unit.unitid || 'unit'}-${unitIndex}`} className="bg-white border border-gray-200 rounded-lg p-6">
                    <h4 className="text-lg font-medium text-gray-900 mb-2">{unit.name}</h4>
                    {unit.code && (
                      <p className="text-sm text-gray-500 mb-4">–ö–æ–¥: {unit.code}</p>
                    )}
                    
                    {unit.details && unit.details.length > 0 && (
                      <div className="space-y-3">
                        <h5 className="text-sm font-medium text-gray-700 mb-3">–î–µ—Ç–∞–ª–∏:</h5>
                        <div className="grid gap-3">
                          {unit.details.map((detail, detailIndex) => (
                            <div key={`${detail.detailid || 'detail'}-${detailIndex}`} className="bg-gray-50 rounded-lg p-4 hover:bg-gray-100 transition-colors">
                              <p className="font-medium text-gray-900 mb-2">{detail.name}</p>
                              <div className="flex flex-wrap gap-4 text-sm text-gray-600">
                                {detail.oem && (
                                  <span>OEM: <span className="font-mono">{detail.oem}</span></span>
                                )}
                                {detail.brand && (
                                  <span>–ë—Ä–µ–Ω–¥: <span className="font-medium">{detail.brand}</span></span>
                                )}
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    );
  }

  if (quickGroupsLoading) {
    return (
      <div className="text-center py-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-red-600 mx-auto"></div>
        <p className="mt-4 text-gray-600">–ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–ø–ø—ã –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞...</p>
      </div>
    );
  }

  if (quickGroupsError) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞:', quickGroupsError);
    return (
      <div className="text-center py-8">
        <div className="text-red-600 mb-4">
          <svg className="w-12 h-12 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
          </svg>
        </div>
        <h3 className="text-lg font-medium text-gray-900 mb-2">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø</h3>
        <p className="text-gray-600 mb-4">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä—É–ø–ø—ã –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞</p>
        <p className="text-sm text-gray-500">
          {quickGroupsError.message}
        </p>
      </div>
    );
  }

  const allQuickGroups = quickGroupsData?.laximoQuickGroups || [];
  const currentGroups = getCurrentGroups();

  if (allQuickGroups.length === 0) {
    return (
      <div className="text-center py-8">
        <div className="text-gray-400 mb-4">
          <svg className="w-12 h-12 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
          </svg>
        </div>
        <h3 className="text-lg font-medium text-gray-900 mb-2">–ì—Ä—É–ø–ø—ã –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</h3>
        <p className="text-gray-600">
          –î–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≥—Ä—É–ø–ø—ã –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        </p>
      </div>
    );
  }

  return (
    <div className="flex h-full min-h-[600px]">
      {/* –õ–µ–≤–∞—è –±–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –≥—Ä—É–ø–ø–∞–º–∏ */}
      <div className="w-80 bg-white border-r border-gray-200 flex flex-col">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏ */}
        <div className="p-4 border-b border-gray-200 bg-gray-50">
          <h3 className="text-lg font-semibold text-gray-900">–ì—Ä—É–ø–ø—ã</h3>
          <p className="text-sm text-gray-600 mt-1">
            –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
          </p>
        </div>

        {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="p-3 border-b border-gray-200 bg-yellow-50">
          <details className="text-xs">
            <summary className="cursor-pointer text-yellow-800 font-medium">üîß –û—Ç–ª–∞–¥–∫–∞ (–≤—Å–µ–≥–æ –≥—Ä—É–ø–ø: {allQuickGroups.length})</summary>
            <div className="mt-2 space-y-1 text-yellow-700">
              <div>–ü–æ–∫–∞–∑—ã–≤–∞–µ–º: {currentGroups.length} –≥—Ä—É–ø–ø</div>
              <div>–ò–µ—Ä–∞—Ä—Ö–∏—è: {groupHierarchy.length} —É—Ä–æ–≤–Ω–µ–π</div>
              {allQuickGroups.length > 0 && (
                <div className="text-xs">
                  –ö–æ—Ä–Ω–µ–≤—ã–µ –≥—Ä—É–ø–ø—ã: {allQuickGroups.map(g => `"${g.name}" (${g.quickgroupid})`).join(', ')}
                </div>
              )}
            </div>
          </details>
        </div>

        {/* –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
        {groupHierarchy.length > 0 && (
          <div className="p-3 border-b border-gray-200 bg-blue-50">
            <nav className="flex items-center space-x-1 text-sm text-gray-600">
              <button
                onClick={() => setGroupHierarchy([])}
                className="hover:text-red-600 transition-colors"
              >
                –ì–ª–∞–≤–Ω–∞—è
              </button>
              {groupHierarchy.map((group, index) => (
                <React.Fragment key={group.quickgroupid}>
                  <svg className="w-3 h-3 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                  </svg>
                  <button
                    onClick={() => handleBackToLevel(index)}
                    className="hover:text-red-600 transition-colors truncate max-w-24"
                    title={group.name}
                  >
                    {group.name}
                  </button>
                </React.Fragment>
              ))}
            </nav>
          </div>
        )}

        {/* –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø */}
        <div className="flex-1 overflow-y-auto">
          <div className="p-2">
            <div className="space-y-1">
              {currentGroups.map((group) => (
                <button
                  key={group.quickgroupid}
                  onClick={() => handleGroupClick(group)}
                  className="w-full text-left p-3 rounded-lg hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-red-500 focus:bg-red-50 transition-all duration-200 group"
                >
                  <div className="flex items-center justify-between">
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center space-x-2">
                        {group.link ? (
                          <svg className="w-4 h-4 text-green-500 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                          </svg>
                        ) : (
                          <svg className="w-4 h-4 text-blue-500 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                          </svg>
                        )}
                        <span className="text-sm font-medium text-gray-900 truncate group-hover:text-gray-700">
                          {group.name}
                        </span>
                      </div>
                      <div className="text-xs text-gray-500 mt-1 ml-6">
                        ID: {group.quickgroupid} ‚Ä¢ {group.children?.length || 0} –ø–æ–¥–≥—Ä—É–ø–ø
                      </div>
                    </div>
                  </div>
                </button>
              ))}
            </div>
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ –º—ã –Ω–µ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ */}
        {groupHierarchy.length > 0 && (
          <div className="p-3 border-t border-gray-200">
            <button
              onClick={() => setGroupHierarchy(prev => prev.slice(0, -1))}
              className="flex items-center text-gray-600 hover:text-gray-900 transition-colors text-sm"
            >
              <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
              –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —É—Ä–æ–≤–Ω—é
            </button>
          </div>
        )}
      </div>

      {/* –ü—Ä–∞–≤–∞—è –æ–±–ª–∞—Å—Ç—å —Å –ø–æ–ª–µ–º –ø–æ–∏—Å–∫–∞ */}
      <div className="flex-1 p-6 bg-gray-50">
        <div className="max-w-2xl">
          <h2 className="text-xl font-semibold text-gray-900 mb-4">
            –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
          </h2>
          
          <div className="mb-6">
            <input
              type="text"
              placeholder="–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-red-500"
            />
          </div>

          <div className="bg-white rounded-lg border border-gray-200 p-6">
            <div className="text-center py-8">
              <div className="text-gray-400 mb-4">
                <svg className="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                </svg>
              </div>
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–≤–∞
              </h3>
              <p className="text-gray-600">
                –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –ª—é–±—É—é –≥—Ä—É–ø–ø—É –≤ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–¥–≥—Ä—É–ø–ø–∞–º –∏–ª–∏ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –¥–µ—Ç–∞–ª–µ–π
              </p>
              {currentGroups.length > 0 && (
                <div className="mt-4 text-sm text-gray-500">
                  –î–æ—Å—Ç—É–ø–Ω–æ –≥—Ä—É–ø–ø: {currentGroups.length}
                </div>
              )}
            </div>
          </div>

          <div className="mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
            <div className="flex items-start">
              <div className="flex-shrink-0">
                <svg className="w-5 h-5 text-blue-400" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                </svg>
              </div>
              <div className="ml-3">
                <h4 className="text-sm font-medium text-blue-900">
                  –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º
                </h4>
                <p className="text-sm text-blue-700 mt-1">
                  üîç –ó–µ–ª–µ–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ - –≥—Ä—É–ø–ø—ã —Å –ø–æ–∏—Å–∫–æ–º –¥–µ—Ç–∞–ª–µ–π<br/>
                  ‚û°Ô∏è –°–∏–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ - –≥—Ä—É–ø–ø—ã —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏<br/>
                  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏.
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default QuickGroupsSection; 