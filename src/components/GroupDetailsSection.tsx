import React, { useState } from 'react';
import { useRouter } from 'next/router';
import { useQuery } from '@apollo/client';
import { GET_LAXIMO_QUICK_DETAIL } from '@/lib/graphql';
import { LaximoQuickDetail, LaximoUnit, LaximoDetail } from '@/types/laximo';
import BrandSelectionModal from './BrandSelectionModal';

interface GroupDetailsSectionProps {
  catalogCode: string;
  vehicleId: string;
  quickGroupId: string;
  groupName: string;
  ssd: string;
  onBack: () => void;
}

interface DetailCardProps {
  detail: LaximoDetail;
}

const DetailCard: React.FC<DetailCardProps> = ({ detail }) => {
  const [isBrandModalOpen, setIsBrandModalOpen] = useState(false);

  const handleDetailClick = () => {
    const articleNumber = detail.oem;
    
    console.log('üîç –ö–ª–∏–∫ –ø–æ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –±—Ä–µ–Ω–¥–∞:', { articleNumber, name: detail.name });
    setIsBrandModalOpen(true);
  };

  const handleCloseBrandModal = () => {
    setIsBrandModalOpen(false);
  };

  const handleAddToCart = () => {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
    console.log('–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É:', detail.oem);
    alert(`–§—É–Ω–∫—Ü–∏—è "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É" –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n–î–µ—Ç–∞–ª—å: ${detail.name}\nOEM: ${detail.oem}`);
  };

  return (
    <div className="bg-white border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
      <div className="flex items-start justify-between mb-3">
        <div className="flex-1">
          <h4 className="text-lg font-semibold text-gray-900 mb-1">{detail.name}</h4>
          <div className="flex items-center space-x-2 text-sm text-gray-600">
            <span className="font-medium">OEM:</span>
            <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded text-xs font-mono">
              {detail.oem}
            </span>
          </div>
        </div>
        
        {detail.brand && (
          <div className="flex-shrink-0 ml-4">
            <span className="bg-green-100 text-green-800 px-2 py-1 rounded text-xs font-medium">
              {detail.brand}
            </span>
          </div>
        )}
      </div>

      {detail.description && (
        <p className="text-gray-700 text-sm mb-3">{detail.description}</p>
      )}

      {detail.applicablemodels && (
        <div className="mb-3">
          <span className="text-xs font-medium text-gray-500 uppercase tracking-wide">
            –ü—Ä–∏–º–µ–Ω–∏–º—ã–µ –º–æ–¥–µ–ª–∏:
          </span>
          <p className="text-sm text-gray-700 mt-1">{detail.applicablemodels}</p>
        </div>
      )}

      {detail.note && (
        <div className="mb-3">
          <span className="text-xs font-medium text-gray-500 uppercase tracking-wide">
            –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:
          </span>
          <p className="text-sm text-gray-700 mt-1">{detail.note}</p>
        </div>
      )}

      {detail.attributes && detail.attributes.length > 0 && (
        <div className="mt-3 pt-3 border-t border-gray-100">
          <div className="flex flex-wrap gap-2">
            {detail.attributes.map((attr, index) => (
              <div key={index} className="text-xs">
                <span className="text-gray-500">{attr.name || attr.key}:</span>
                <span className="ml-1 text-gray-700">{attr.value}</span>
              </div>
            ))}
          </div>
        </div>
      )}

      <div className="mt-4 flex items-center justify-between">
        <button
          className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors"
          onClick={handleDetailClick}
        >
          –ù–∞–π—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        </button>
        
        <button
          className="text-gray-500 hover:text-gray-700 text-sm transition-colors"
          onClick={handleAddToCart}
        >
          –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
        </button>
      </div>
      
      <BrandSelectionModal
        isOpen={isBrandModalOpen}
        onClose={handleCloseBrandModal}
        articleNumber={detail.oem}
        detailName={detail.name}
      />
    </div>
  );
};

interface UnitSectionProps {
  unit: LaximoUnit;
}

const UnitSection: React.FC<UnitSectionProps> = ({ unit }) => {
  return (
    <div className="mb-8">
      <div className="bg-gray-50 border border-gray-200 rounded-lg p-4 mb-4">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="text-lg font-semibold text-gray-900">{unit.name}</h3>
            {unit.code && (
              <p className="text-sm text-gray-600 mt-1">–ö–æ–¥: {unit.code}</p>
            )}
            {unit.description && (
              <p className="text-sm text-gray-700 mt-2">{unit.description}</p>
            )}
          </div>
          
          {unit.details && unit.details.length > 0 && (
            <div className="text-sm text-gray-500">
              {unit.details.length} {unit.details.length === 1 ? '–¥–µ—Ç–∞–ª—å' : '–¥–µ—Ç–∞–ª–µ–π'}
            </div>
          )}
        </div>
      </div>

      {unit.details && unit.details.length > 0 ? (
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
          {unit.details.map((detail) => (
            <DetailCard key={detail.detailid} detail={detail} />
          ))}
        </div>
      ) : (
        <div className="text-center py-8 text-gray-500">
          <svg className="w-12 h-12 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2 2v-5m16 0H4m0 0l4-4m0 8l4-4" />
          </svg>
          <p>–í —ç—Ç–æ–º —É–∑–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π</p>
        </div>
      )}
    </div>
  );
};

const GroupDetailsSection: React.FC<GroupDetailsSectionProps> = ({
  catalogCode,
  vehicleId,
  quickGroupId,
  groupName,
  ssd,
  onBack
}) => {
  console.log('üîç GroupDetailsSection –ø–æ–ª—É—á–∏–ª –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', {
    catalogCode,
    vehicleId,
    quickGroupId,
    quickGroupIdType: typeof quickGroupId,
    quickGroupIdLength: quickGroupId?.length,
    groupName,
    ssd: ssd ? `${ssd.substring(0, 30)}...` : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
  });

  const { data, loading, error } = useQuery<{ laximoQuickDetail: LaximoQuickDetail }>(
    GET_LAXIMO_QUICK_DETAIL,
    {
      variables: {
        catalogCode,
        vehicleId,
        quickGroupId,
        ssd
      },
      skip: !catalogCode || !vehicleId || !quickGroupId || !ssd,
      errorPolicy: 'all'
    }
  );

  if (loading) {
    return (
      <div className="text-center py-12">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-red-600 mx-auto"></div>
        <p className="mt-4 text-lg text-gray-600">–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≥—Ä—É–ø–ø—ã...</p>
        <p className="text-sm text-gray-500 mt-1">{groupName}</p>
      </div>
    );
  }

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –≥—Ä—É–ø–ø—ã:', error);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const isInvalidParameterError = error.message.includes('E_INVALIDPARAMETER') || 
                                   error.message.includes('INVALIDPARAMETER') ||
                                   error.message.includes('QuickGroupId');
    
    return (
      <div className="text-center py-12">
        <div className="text-red-600 mb-4">
          <svg className="w-12 h-12 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </div>
        
        {isInvalidParameterError ? (
          <>
            <h3 className="text-lg font-medium text-red-600 mb-2">–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≥—Ä—É–ø–ø–∞</h3>
            <p className="text-gray-600 mb-4">
              –ì—Ä—É–ø–ø–∞ "{groupName}" (ID: {quickGroupId}) –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è API Laximo –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.
            </p>
            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6 text-left max-w-md mx-auto">
              <h4 className="font-medium text-yellow-800 mb-2">üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h4>
              <ul className="text-sm text-yellow-700 space-y-1">
                <li>‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞"</li>
                <li>‚Ä¢ –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É</li>
                <li>‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –¥–µ—Ç–∞–ª–∏</li>
                <li>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–ì—Ä—É–ø–ø—ã –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞"</li>
              </ul>
            </div>
          </>
        ) : (
          <>
            <h3 className="text-lg font-medium text-red-600 mb-2">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π</h3>
            <p className="text-gray-600 mb-4">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã "{groupName}"</p>
            <p className="text-sm text-gray-500 mb-4">–û—à–∏–±–∫–∞: {error.message}</p>
          </>
        )}
        
        <button
          onClick={onBack}
          className="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors"
        >
          –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–∞–º
        </button>
      </div>
    );
  }

  if (!data?.laximoQuickDetail) {
    return (
      <div className="text-center py-12">
        <div className="text-gray-400 mb-4">
          <svg className="w-12 h-12 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2 2v-5m16 0H4m0 0l4-4m0 8l4-4" />
          </svg>
        </div>
        <h3 className="text-lg font-medium text-gray-600 mb-2">–î–µ—Ç–∞–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
        <p className="text-gray-500 mb-4">–î–ª—è –≥—Ä—É–ø–ø—ã "{groupName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π</p>
        <button
          onClick={onBack}
          className="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition-colors"
        >
          –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–∞–º
        </button>
      </div>
    );
  }

  const quickDetail = data.laximoQuickDetail;
  const totalDetails = quickDetail.units?.reduce((total, unit) => total + (unit.details?.length || 0), 0) || 0;

  return (
    <div className="space-y-6">
      {/* –®–∞–ø–∫–∞ */}
      <div className="bg-white border border-gray-200 rounded-lg p-6">
        <div className="flex items-center justify-between">
          <div>
            <button
              onClick={onBack}
              className="flex items-center text-blue-600 hover:text-blue-800 mb-2 transition-colors"
            >
              <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
              –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–∞–º
            </button>
            
            <h2 className="text-2xl font-bold text-gray-900">{quickDetail.name || groupName}</h2>
            <p className="text-gray-600 mt-1">ID –≥—Ä—É–ø–ø—ã: {quickDetail.quickgroupid}</p>
          </div>
          
          <div className="text-right">
            <p className="text-sm text-gray-500">–ù–∞–π–¥–µ–Ω–æ</p>
            <p className="text-2xl font-bold text-blue-600">{totalDetails}</p>
            <p className="text-sm text-gray-500">{totalDetails === 1 ? '–¥–µ—Ç–∞–ª—å' : '–¥–µ—Ç–∞–ª–µ–π'}</p>
          </div>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ —É–∑–ª–æ–≤ –∏ –¥–µ—Ç–∞–ª–µ–π */}
      {quickDetail.units && quickDetail.units.length > 0 ? (
        <div>
          {quickDetail.units.map((unit) => (
            <UnitSection key={unit.unitid} unit={unit} />
          ))}
        </div>
      ) : (
        <div className="bg-white border border-gray-200 rounded-lg p-12 text-center">
          <div className="text-gray-400 mb-4">
            <svg className="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2 2v-5m16 0H4m0 0l4-4m0 8l4-4" />
            </svg>
          </div>
          <h3 className="text-xl font-medium text-gray-600 mb-2">–£–∑–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
          <p className="text-gray-500">–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–∑–ª–æ–≤ –∏ –¥–µ—Ç–∞–ª–µ–π</p>
        </div>
      )}
    </div>
  );
};

export default GroupDetailsSection; 